@page "/recipe"
@page "/recipe/{Id:int}"

@rendermode InteractiveWebAssembly
@attribute [StreamRendering]
@inject IRecipeService RecipeService
@inject NavigationManager NavigationManager

@if (Id.HasValue)
{
    <PageTitle>Recipe</PageTitle>
    <h3>Recipe</h3>
}
else
{
    <PageTitle>Create Recipe</PageTitle>
    <h3>Create Recipe</h3>
}
<hr />

<EditForm Model="recipe" OnSubmit="HandleSubmit">
    <InputText @bind-Value="recipe.Name">@recipe.Name</InputText>
</EditForm>
<hr />

<EditForm Model="recipe">
    <Ingredients IngredientsList="@recipe.Ingredients.ToList()"/> <!-- Denna har inte tillgång till tillagda ingredienser vid spara -->
</EditForm>

<h5>Instructions</h5>
<EditForm Model="recipe" OnSubmit="HandleSubmit">
    <InputTextArea @bind-Value="recipe.Instructions">@recipe.Instructions</InputTextArea>
    <br /><br />
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    
    private string ingredient = string.Empty;
    private Recipe recipe = new Recipe() { Name = string.Empty, Ingredients = new List<Ingredient>() };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            recipe = await RecipeService.GetRecipeByIdAsync(Id.Value);
        }
    }

    async Task HandleSubmit()
    {
        if (Id.HasValue)
        {
            recipe = await RecipeService.UpdateRecipeAsync(Id.Value, recipe);
        }
        else
        {
            recipe = await RecipeService.AddRecipeAsync(recipe);
            NavigationManager.NavigateTo($"/recipe/{recipe.Id}");
        }
    }
}