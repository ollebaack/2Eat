@rendermode InteractiveWebAssembly
@inject IIngredientService IngredientService

<h5>Ingredients</h5>

<ul class="styled-ul">
    @foreach (var ingredient in _ingredients)
    {
        <li>
            @ingredient.Name
        </li>
    }
</ul>
<InputText class="styled-input" @bind-Value="Name" @oninput="OnInputChanged"></InputText>
@if (suggestedIngredients.Any())
{
    @foreach (var ingredient in suggestedIngredients)
    {
        <button @onclick="() => SelectIngredient(ingredient)" class="suggestion-button">
            @ingredient.Name
        </button>
    }
}
<br />
<button @onclick="AddIngredient" class="btn btn-primary">+</button>
<hr />

@code {
    private ICollection<Ingredient> _ingredients;
    private string? Name = string.Empty;

    [Parameter]
    public ICollection<Ingredient> IngredientsList
    {
        get => _ingredients;
        set
        {
            if (_ingredients != value)
            {
                _ingredients = value;
                IngredientsListChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<ICollection<Ingredient>> IngredientsListChanged { get; set; }

    private List<Ingredient> suggestedIngredients = new List<Ingredient>();
    private List<Ingredient>? allIngredients = null;

    // Ensure the component initializes _ingredients correctly
    protected override void OnInitialized()
    {
        _ingredients = IngredientsList ?? new List<Ingredient>();
    }

    // This method would be triggered every time the user types in the input.
    private async Task OnInputChanged(ChangeEventArgs e)
    {
        Name = e.Value?.ToString();
        await UpdateSuggestionsAsync();
    }

    // This method simulates updating the suggestions based on the input.
    // In a real application, you might fetch the suggestions from the database here.
    private async Task UpdateSuggestionsAsync()
    {
        if (allIngredients == null || allIngredients.Count < 1)
        {
            allIngredients = await IngredientService.GetIngredientsAsync();
        }
   
        // This is where you would filter the ingredients based on the database entries.
        // For demonstration, it just clears previous suggestions.
        suggestedIngredients.Clear();
        if (!string.IsNullOrWhiteSpace(Name) && allIngredients.Any(i => i.Name.StartsWith(Name, StringComparison.OrdinalIgnoreCase)))
        {
            // This is a placeholder for actual filtering logic.
            await Task.Delay(500);
            suggestedIngredients.AddRange(allIngredients.Where(i => i.Name.StartsWith(Name, StringComparison.OrdinalIgnoreCase)));
        }
    }

    private void SelectIngredient(Ingredient ingredient)
    {
        Name = ingredient.Name;
        suggestedIngredients.Clear();
    }

    private void AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(Name))
        {
            _ingredients.Add(new Ingredient() { Name = Name });
            Name = string.Empty;
            IngredientsListChanged.InvokeAsync(_ingredients); // Notify parent component
        }
    }
}
