@using System.Net.Http.Headers
@inject IClient Client
@inject IJSRuntime JS
@inject HttpClient Http

@if (Edit)
{
    @* <div class="mb-3">
        <label for="formFile" class="form-label">Lägg till bild</label>
        <InputFile OnChange="OnInputFileChange"/>
    </div> *@

    <label for="inputFile" class="btn btn-secondary me-1">
        <InputFile id="inputFile" OnChange="OnInputFileChange" class="d-none" />
        Upload File
    </label>
}

@* @if (!string.IsNullOrWhiteSpace(_recipe?.ImageUrl))
{
    <img id="imgHolder" src="@_recipe.ImageUrl" width="400"/>
} *@

@code {
    [Parameter]
    public bool Edit { get; set;  } = false;
    [Parameter]
    public Recipe? recipe
    {
        get => _recipe; // Return the backing field
        set
        {
            if (_recipe != value) // Compare with the backing field
            {
                _recipe = value; // Assign the new value to the backing field
                recipeChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public EventCallback<Recipe> recipeChanged { get; set; }
    private Recipe? _recipe; // Private backing field

    private long maxFileSize = 10 * 1024 * 1024; // 10MB
    private FileUpload? uploadResult = new FileUpload();
    private string? imgSrc = string.Empty;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(e.File.OpenReadStream(maxFileSize));
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(
            content: fileContent,
            name: "file",
            fileName: e.File.Name);

        Client.SetEntityEndpoint("files");
        uploadResult = await Client.CreateAsync<FileUpload, MultipartFormDataContent>(content);

        _recipe.ImageUrl = await StreamFileAsync(uploadResult.StoredFileName, uploadResult.FileName);
        Client.SetEntityEndpoint("recipes");
        _recipe = await Client.UpdateAsync<Recipe, Recipe>(_recipe.Id, _recipe);
        recipeChanged.InvokeAsync(_recipe); // Notify parent component
        StateHasChanged();
    }

    private async Task<string> StreamFileAsync(string storedFileName, string originalFileName)
    {
        var response = await Http.GetAsync($"api/files/{storedFileName}");
        if (response.IsSuccessStatusCode)
        {
            var fileStream = await response.Content.ReadAsStreamAsync();
            using var streamRef = new DotNetStreamReference(fileStream);
            return await JS.InvokeAsync<string>("IMAGE_STREAMER.GetImgSrc", streamRef);
        }
        return string.Empty;
    }
}