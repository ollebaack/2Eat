@* @rendermode @(new InteractiveWebAssemblyRenderMode(false)) *@
@inject IClient Client

<h5>Ingredienser</h5>
@if (IsBuffering)
{
    <div class="ingredient-list">
            @for (int i = 0; i < 4; i++)
            {   
                <div class="ingredient-item">
                    <p class="card-text placeholder-glow" style="width: 15rem;">
                        <span class="placeholder col-8"></span>
                    </p>
                </div>
            }
        </div>
}
else
{
    @if (!Edit)
    {
        <div class="ingredient-list">
            @foreach (var recipeIngredient in _recipeIngredients.ToList())
            {   
                <div class="ingredient-item">
                    @* <i class="fa-solid fa-circle-minus fa-fade remove-btn" @onclick="() => RemoveIngredient(recipeIngredient.Ingredient.Name)"></i>  *@
                    <div class="noselect">@recipeIngredient.ToString()</div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="ingredient-list">
            @foreach (var recipeIngredient in _recipeIngredients.ToList())
            {
                <div class="ingredient-item">
                    <div class="has-cursor-grab" style="padding-right: 5px">
                        <div class="drag-handle mr-4">
                            <i class="is-size-4 fas fa-grip-vertical"></i>
                        </div>
                    </div>
                    <div class="noselect">@recipeIngredient.ToString()</div>                        
                </div>
            }
        </div>

        <RadzenTemplateForm TItem="RecipeIngredient" Data=@recipeIngredient Submit=@OnSubmit>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Left" Wrap="FlexWrap.Wrap" Gap="1rem" class="rz-p-sm-12">
                <RadzenFormField Text="Ingrediens" Variant="@variant">
                    <ChildContent>
                        <RadzenAutoComplete @bind-Value=@Name Data=@ingredientNames LoadData=@LoadData/>
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Mängd" Variant="@variant">
                    <ChildContent>
                        <RadzenNumeric @bind-Value="ingredientMeasurement.Quantity" />
                    </ChildContent>
                </RadzenFormField>
                <RadzenFormField Text="Enhet" Variant="@variant">
                    <ChildContent>
                        <RadzenDropDown @bind-Value=@ingredientMeasurement.Unit Data=@units />
                    </ChildContent>
                </RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Submit" ></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>
    }
}

@code {
    [Parameter]
    public bool Edit { get; set; } = false;

    [Parameter]
    public bool IsBuffering { get; set; } = false;

    [Parameter]
    public ICollection<RecipeIngredient>? IngredientsList
    {
        get => _recipeIngredients;
        set
        {
            var sortedValue = value.OrderBy(ri => ri.Order).ToList();
            if (!_recipeIngredients.SequenceEqual(sortedValue))
            {
                _recipeIngredients = sortedValue;
                IngredientsListChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<ICollection<RecipeIngredient>> IngredientsListChanged { get; set; }

    private Variant variant = Variant.Text;
    private ICollection<RecipeIngredient> _recipeIngredients = new List<RecipeIngredient>();
    private string? Name = string.Empty;
    private IngredientMeasurement ingredientMeasurement = new IngredientMeasurement();
    private UnitOfMeasurement[] units = Enum.GetValues<UnitOfMeasurement>();
    private RecipeIngredient recipeIngredient = new RecipeIngredient() { Ingredient = new Ingredient() };

    private List<Ingredient>? allIngredients { get; set; }
    private IEnumerable<string>? ingredientNames { get; set; }
    private async Task LoadData(LoadDataArgs args)
    {
        if (allIngredients == null)
        {
            Client.SetEntityEndpoint("ingredients");
            allIngredients = await Client.GetAsync<Ingredient>();
            allIngredients.RemoveAll(i => _recipeIngredients.Any(ri => ri.Ingredient.Name == i.Name));
        }

        ingredientNames = allIngredients.Select(i => i.Name).Where(x => x.StartsWith(args.Filter));
    }

    private void OnSubmit(RecipeIngredient recipeIngredient)
    {
        if (!string.IsNullOrWhiteSpace(Name))
        {
            bool existingIngredient = _recipeIngredients.Any(i => i.Ingredient.Name == Name);
            if (!existingIngredient)
            {
                // Find the highest current order value in the list
                int maxOrder = _recipeIngredients.Any() ? _recipeIngredients.Max(i => i.Order) : 0;

                recipeIngredient.Ingredient.Name = Name;
                recipeIngredient.Order = maxOrder + 1;
                recipeIngredient.IngredientMeasurement = new IngredientMeasurement() { Quantity = ingredientMeasurement.Quantity, Unit = ingredientMeasurement.Unit };

                _recipeIngredients.Add(recipeIngredient);
                Name = string.Empty;
                IngredientsListChanged.InvokeAsync(_recipeIngredients); // Notify parent component
            }
        }
    }
}
