@page "/"
@inject IFormFactor FormFactor
@inject IClient Client
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

@if (randomRecipes == null)
{
    <span>loading...</span>
}
else if (randomRecipes.Count == 0)
{
    <span>There are no added receipies yet.</span>
}
else
{
    <div id="carouselExampleIndicators" class="carousel slide">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="2" aria-label="Slide 3"></button>
        </div>
        <div class="carousel-inner">
            @foreach (var recipe in randomRecipes)
            {
                <div class="carousel-item @(recipe == randomRecipes.First() ? "active" : "")">
                    <div class="carousel-caption d-none d-md-block" style="cursor: pointer;" @onclick="() => GetRecipe(recipe.Id)">
                        <h5>@recipe.Name</h5>
                        <p>@recipe.Description</p>
                    </div>
                        <img src="@(recipe?.ImageUrl ?? "_content/2Eat.WebUI.Shared/defaultimg/Keto-meat-pie-h.png")" class="d-block w-100" style="height: 87vh;object-fit: cover" alt="...">
                </div>
            }
            <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </div>    
}


@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    List<Recipe>? randomRecipes;
    private bool slideRendered = false;

    protected override async Task OnInitializedAsync()
    {
        Client.SetEntityEndpoint("recipes");
        randomRecipes ??= await Client.GetRandomAsync<Recipe>(3);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (randomRecipes != null && !slideRendered)
        {
            await JS.InvokeVoidAsync("initializeCarousel", "carouselExampleIndicators");
            slideRendered = true;
        }
    }

    private Recipe GetRandomRecipe()
    {
        return randomRecipes![new Random().Next(0, randomRecipes.Count)];
    }

    private void GetRecipe(int id)
    {
        NavigationManager.NavigateTo($"/recipe/{id}");
    }
}
