@page "/recipe"
@page "/recipe/{Id:int}/edit"

@attribute [StreamRendering]
@inject IClient Client
@inject NavigationManager NavigationManager

<EditForm FormName="editRecipe" Context="RecipeForm" Model="recipe" OnSubmit="HandleSubmit">
    @if (Id.HasValue)
    {
        <PageTitle>Recept</PageTitle>
        
        <InputText @bind-Value="recipe.Name" class="form-control" />
    }
    else
    {
        <PageTitle>Skapa Recept</PageTitle>
        <InputText @bind-Value="recipe!.Name">@recipe.Name</InputText>
    }
    <hr />

    <img class="recipe-img" src="@(recipe?.ImageUrl ?? "_content/2Eat.WebUI.Shared/defaultimg/Keto-meat-pie-h.png")" />
    <br />
    <br />
    <FileUppload @bind-recipe="recipe" Edit=true></FileUppload>

    <hr />

    <h5>Beskrivning</h5>

    <p>@recipe!.Description</p>

    <RecipeIngredients @bind-IngredientsList="recipe.Ingredients" Edit=true />

    <h5>Instruktioner</h5>
    @* <InputTextArea @bind-Value="recipe.Instructions" rows="10" style="width: 40vw">@recipe.Instructions.AsMarkup()</InputTextArea> *@
    <RadzenHtmlEditor @bind-Value=@recipe.Instructions style="height: 300px;" Input=@OnInput Change=@OnChange Paste=@OnPaste Execute=@OnExecute UploadUrl="upload/image" />


    <br />
    <div class="d-grid gap-2 d-md-flex justify-content-md-start">
        @if (Id.HasValue)
        {
            <button class="btn btn-primary me-md-2" onclick="() => HandleBack()">Backa</button>   
        }
        <button type="submit" class="btn btn-success">Spara</button>   
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    private Recipe recipe = new Recipe();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine("EditRecipe OnInitializedAsync called");
        if (Id.HasValue)
        {
            Client.SetEntityEndpoint("recipes");
            recipe = await Client.GetByIdAsync<Recipe>(Id.Value);
        }
    }

    protected async Task HandleSubmit()
    {
        if (Id.HasValue)
        {
            Client.SetEntityEndpoint("recipes");
            recipe = await Client.UpdateAsync<Recipe, Recipe>(Id.Value, recipe);
        }
        else
        {
            Client.SetEntityEndpoint("recipes");
            recipe = await Client.CreateAsync<Recipe, Recipe>(recipe);
        }

        NavigationManager.NavigateTo($"/recipe/{recipe.Id}");
    }

    protected void HandleBack()
    {
        NavigationManager.NavigateTo($"/recipe/{recipe.Id}");
    }

    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        @* console.Log($"Paste: {args.Html}"); *@
    }

    void OnChange(string html)
    {
        @* console.Log($"Change: {html}"); *@
    }

    void OnInput(string html)
    {
        @* console.Log($"Input: {html}"); *@
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        @* console.Log($"Execute: {args.CommandName}"); *@
    }
}